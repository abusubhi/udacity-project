def too_long(s):
    # Complete this function!
    # It should return True when s is longer than 140.
    # It should return False when s is shorter than 140.
    return
    
# Test a short string
print("This should be False:")
print(too_long("I'm a short string!"))

# Test a long string
print("This should be True:")
print(too_long("Four score and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal."))


********************************************************************************************

def possible_tag(word):
    if word.startswith("<") and word.endswith(">"):
        print(word, "could maybe be an HTML tag")
    else:
        print(word, "is definitely not an HTML tag (but might contain one)")


*******************************************************************************************

for x in [7, 8, 9]:
    y = x + 1
    print(f"After {x} comes {y}.")

**************************************************

def total_length(strings):
    total = 0
    for s in strings:
        total = total + len(s)
    return total
********************************************

>>> bunch = ['banana', 'banana', 'banana']
>>> bunches = [bunch, bunch, bunch]
>>> for b in bunches:
...     print(b)
['banana', 'banana', 'banana']
['banana', 'banana', 'banana']
['banana', 'banana', 'banana']

******************************************

>>> count_x("x")
1
>>> count_x("oxen and foxen all live in boxen")
3
>>> count_x("that letter isn't here")
0
*****************************************

def count_ch(string, target):
    total = 0
    for ch in string:
        if ch == target:
            total += 1
    return total

0
****************************************************

def count_ch(string, target):
    index = 0
    total = 0
    while index < len(string):
        if string[index] == target:
            total += 1
        index += 1
    return total

**********************************************
def until_dot(s):
    index = 0
    while index < len(s) and s[index] != '.':
        # No dots yet, keep going.
        index += 1
    # We either found a dot or ran out of string.
    return s[:index]
***************************************
def until_dot(s):
    for index in range(len(s)):
        if s[index] == '.':
            # A dot! Return everything up to here.
            return s[:index-1]
    # We ran out of string without seeing any dots.
    # Return the whole string.
    return s
******************************************

def no_repeating():
    words = []
    while True:
        word = input("Tell me a word: ")
        if word in words:
            print("You told me that word already!")
            break
        words.append(word)
    return words

****************************************

def find_512():
    for x in range(100):
        for y in range(100):
            if x * y == 512:
                 break   # does not do what we want!
    return f"{x} * {y} == 512"

***********************************

#!/usr/bin/env python3
#
# Number Guessing Game!

def prompt(num):
    # Use this function to ask the user about a guess.
    # This function returns 'H', 'L', or 'C'.
    print(f"My guess: {num}")
    inp = ""
    while inp.upper() not in ['H', 'L', 'C']:
        inp = input(f"Is {num} too (H)igh, too (L)ow, or (C)orrect? ")
    return inp.upper()


def play(max):
    print(f"Think of a number from 1 to {max}.")
    input("When you're ready, press Enter.")

    #
    # Write your code here!
    #


if __name__ == '__main__':
    play(1000)

*******************************************************************
def starts_with_v1(long, short):
    for position in range(len(short)):
        if long[position] != short[position]:
            return False
return True
********************
    
def starts_with_v2(long, short):
    length = len(short)
    beginning = long[0 : length]
    if beginning == short:
        return True
    else:
        return False

************************************

def starts_with_v3(long, short):
    return long[0:len(short)] == short
**************************************

def is_substring(short, long):
    index = 0
    while index < (len(long) - len(short) + 1):
        if long[index : index + len(short)] == short:
            return True
        index += 1
    return False
********************************************

def count_substring_v1(string, target):
    count = 0
    index = 0
    while index < len(string) - len(target) + 1:
        if string[index : index + len(target)] == target:
            count += 1
        index += 1    # <- look here
    return count

def count_substring_v2(string, target):
    count = 0
    index = 0
    while index < len(string) - len(target) + 1:
        if string[index : index + len(target)] == target:
            count += 1
            index += len(target)   # <- look here
        else:
            index += 1
    return count 

******************************************

def locate_all(string, sub):
    matches = []
    index = 0
    while index < len(string) - len(sub) + 1:
        if string[index : index + len(sub)] == sub:
            matches.append(index)
            index += len(sub)
        else:
            index += 1
    return matches

*****************************************
def breakify(strings):
    return "<br>".join(strings)
*************************************
import random
import words


def silly_string(nouns, verbs, templates):
    # Choose a random template.
    template = random.choice(templates)

    # We'll append strings into this list for output.
    output = []

    # Keep track of where in the template string we are.
    index = 0

    # Add a while loop here.

    # After the loop has finished, join the output and return it.


if __name__ == '__main__':
    print(silly_string(words.nouns, words.verbs,
        words.templates))

*********************************************************

import random
import words


def silly_string(nouns, verbs, templates):
    # Choose a random template.
    template = random.choice(templates)

    # We'll append strings into this list for output.
    output = []

    # Keep track of where in the template string we are.
    pos = 0

    while pos < len(template):
        if template[pos:pos+8] == '{{noun}}':
            # Add a random noun to the output.
            output.append(random.choice(nouns))
            pos += 8
        elif template[pos:pos+8] == '{{verb}}':
            # Add a random verb to the output.
            output.append(random.choice(verbs))
            pos += 8
        else:
            # Copy a character to the output.
            output.append(template[pos])
            pos += 1

    # Join the output into a single string.
    output = ''.join(output)

    return output


if __name__ == '__main__':
    print(silly_string(words.nouns, words.verbs,
        words.templates))



****************************************


text = "this is not a reversed text"
def reverse(x):
       #complete this function so that it takes string x as an input
      #and returns its reverse 
      str="" 
      for i in x: 
              str = i+str 
      return str
print("the reversed text is: "+reverse(text))

**************************************************


no_list = [22,68,90,78,90,88]
def Average(no_list): 
    avg = sum(no_list) / len(no_list) 
    return avg
  

average = Average(no_list) 
  
print("Average of my_list is", average)

****************************************8

no_list = [1,2,3,4]

def maximum(no_list):
    max = no_list[ 0 ]
    for a in no_list:
        if a > max:
            max = a
    return max

print(maximum(no_list))

*****************************************

no_list = [22,22,2,1,11,11,2,2,3,3,3,4,5,5,5,55,55,66]

def unique_list(no_list):
  #complete the function's body to return the unique list of numbers
 x=set(no_list)
 return sorted(list(x))
print(unique_list(no_list))














def reverse(x):
    list =''
    length = len(x) -1
    while length >= 0 :
        list = list + x[length]
        length = length -1
    return list
print("the reversed text is: "+reverse(text))

# Task 2:
no_list = [22,68,90,78,90,88]

def average(x):
    sum = 0
    for i in x:
        sum += i
    return sum / len(x)

print(average(no_list))

# Task 3:
no_list = [1,2,3,4]

def maximum(no_list):
    #complete the function to return the highest number in the list
    max= no_list[0]
    for i in no_list:
        if i > max:
            max = i
    return max
print(maximum(no_list))

# Task 4:
no_list = [22,22,2,1,11,11,2,2,3,3,3,4,5,5,5,55,55,66]

def unique_list(l):
    x =  []
    for i in l:
        if i not in x:
            x.append(i)
    return x
                   
print(unique_list(no_list))






